package be.ac.ulb.infof307.g10.models;

import java.io.Serializable;
import java.util.Observable;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.EqualsExclude;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.HashCodeExclude;
import org.apache.commons.lang3.builder.ToStringBuilder;

/**
 * Abstract superclass of all model objects. This class provide an id for easier
 * JPA management, toString, equals and hashCode functions based on reflection to
 * avoid the need to override these methods in every subclasses. Also, a changed
 * method is provided to mark object as changed and notify observers.
 */
@Entity
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
abstract public class AbstractObject extends Observable implements Serializable {

	private static final long serialVersionUID = 1L;

	/**
	 * ID auto generated by database to keep track of object. Not used for
	 * equals check nor hash code creation.
	 */
	@Id
	@GeneratedValue
	@EqualsExclude
	@HashCodeExclude
	private Long id;

	/**
	 * Needed by JPA
	 */
	protected AbstractObject() {
	}

	public Long getId() {
		return id;
	}

	/**
	 * Shortcut to notify Observers
	 */
	protected void changed() {
		setChanged();
		notifyObservers();
	}

	@Override
	public String toString() {
		return ToStringBuilder.reflectionToString(this);
	}

	@Override
	public boolean equals(Object o) {
		return EqualsBuilder.reflectionEquals(this, o);
	}

	@Override
	public int hashCode() {
		return HashCodeBuilder.reflectionHashCode(this);
	}

}
